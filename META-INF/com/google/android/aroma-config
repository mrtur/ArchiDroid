### LICENSE:
#
# Copyright (C) 2013 Ahmad Amarullah ( http://amarullz.com/ )
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
###############################################################
#     _                _      _  ____               _      _  #
#    / \    _ __  ___ | |__  (_)|  _ \  _ __  ___  (_)  __| | #
#   / _ \  | '__|/ __|| '_ \ | || | | || '__|/ _ \ | | / _` | #
#  / ___ \ | |  | (__ | | | || || |_| || |  | (_) || || (_| | #
# /_/   \_\|_|   \___||_| |_||_||____/ |_|   \___/ |_| \__,_| #
#                                                             #
###############################################################


##
# Initializing Rom Information
##

setvar("preset_version","6");

ini_set("dp","3");
ini_set("rom_name",             "ArchiDroid");
ini_set("rom_version",          "2.3.6");
ini_set("rom_author",           "JustArchi");
ini_set("rom_device",           "Samsung Galaxy S3");
ini_set("rom_date",             "February XXth, 2014");

##
# Show Animated Splash
##
anisplash(
	#-- Number of Loop
	1,

	#-- Frame 1 [ Image, duration in millisecond ]. <AROMA Resource Dir>/splash/a[1..6].png
	"archidroidsplash", 2000,
	"archidroidsplash2", 2000
);

#
# Set Small Font to Support all fonts
#
fontresload( "0", "ttf/DroidSans.ttf;ttf/DroidSansFallback.ttf;ttf/DroidSansArabic.ttf;", "12" ); #-- Use sets of font (Font Family)
fontresload( "1", "ttf/DroidSans.ttf;ttf/DroidSansFallback.ttf;ttf/DroidSansArabic.ttf;", "14" ); #-- Use sets of font (Font Family)

theme("touchwiz");

# Mount required filesystems
resexec("exec/admount.sh", "/system");
resexec("exec/admount.sh", "/data");
resexec("exec/archidroid_init.sh");
setvar("extsdinstall", resexec("exec/archidroid_detect_zip.sh"));


viewbox(
	#-- Title
	"Welcome!",

	#-- Text
	"Hello master, root@ArchiDroid here. Welcome to AROMA. You are about to install <b>"+
	#-- Get Config Value
	ini_get("rom_name")+ "</b> for <b>"+ini_get("rom_device")+"</b>.\n\n"+
	"Version:\t\t\t <b><#selectbg_g>"+ini_get("rom_version")+"</#></b>\n"+
	"Released:\t\t <b><#selectbg_g>"+ini_get("rom_date")+"</#></b>\n\n\n"+
	"Press <b>Next</b> to continue the installation.",

	#-- Icon
	"@welcome"
);

form(
	"ArchiDroid Language",
	"Which language would you like to use?",
	"@confirm",
	"lang.prop",

	"language","<#selectbg_g>Language</#>","","group",
	"langs/al.lang","Albanian","Shqiptar, thanks to CEPi","select",
	"langs/zh_CN.lang","Chinese (Simplified)","简化字, thanks to Syrone Wong","select",
	"langs/cr.lang","Croatian","Hrvatski, thanks to gastonmazzacane","select",
	"langs/da.lang","Danish","Dansk, thanks to WarCow","select",
	"langs/nl.lang","Dutch","Nederlands, thanks to MuerteDiablo","select",
	"langs/en.lang","English", "","select.selected",
	"langs/fi.lang","Finnish","Suomi, thanks to amppen","select",
	"langs/fr.lang","French","Français, thanks to nmeuret","select",
	"langs/de.lang","German","Deutsch, thanks to beyerservice, phoberus","select",
	"langs/el.lang","Greek","ελληνικά, thanks to Jimdem","select",
	"langs/hu.lang","Hungarian","Magyar, thanks to Andy1210","select",
	"langs/it.lang","Italian","Italiano, thanks to DarkAriex","select",
	"langs/fa.lang","Persian","فارسي, thanks to blv1","select",
	"langs/pl.lang","Polish","Polski","select",
	"langs/pt.lang","Portuguese","Português, thanks to Andrecaron","select",
	"langs/ru.lang","Russian","Pусский, thanks to egotheist, aglab2","select",
	"langs/es.lang","Spanish","Español, thanks to mariesqu","select",
	"langs/tr.lang","Turkish","Türkçe, thanks to ZiR0, MadCoderz","select"
);

loadlang(file_getprop("/tmp/aroma-data/lang.prop","language"));

textbox(
	#-- Title
	"Changelog",

	#-- Subtitle
	"",

	#-- Icon
	"@info",

	#-- Arg 4
	resread("_changelog.txt")
);

agreebox(
	#-- Title
	"<~archidroid.tos>",

	#-- Subtitle / Description
	"",

	#-- Icon
	"@license",

	#-- Text Content ( Read from <AROMA Resource Dir>/read_me.txt )
	resread("read_me.txt"),

	#-- Checkbox Text
	"<~terms.check>",

	#-- Unchecked Alert Message
	"<~terms.confirm>"
);

agreebox(
	#-- Title
	"<~archidroid.tos>",

	#-- Subtitle / Description
	"",

	#-- Icon
	"@license",

	#-- Text Content ( Read from <AROMA Resource Dir>/read_me2.txt )
	resread("read_me2.txt"),

	#-- Checkbox Text
	"<~terms.check2>",

	#-- Unchecked Alert Message
	"<~terms.confirm2>"
);

form(
	"<~archidroid.preset>",
	"<~archidroid.preset.desc>",
	"@apps",
	"archidroidinstallmode.prop",

	"preset","<#selectbg_g><~archidroid.preset.group></#>","","group",
	"custom","<~archidroid.preset.custom>", "<~archidroid.preset.custom.desc>","select",
	"previous","<~archidroid.preset.previous>","<~archidroid.preset.previous.desc>","select.selected",
	"barebones","<~archidroid.preset.barebones>","<~archidroid.preset.barebones.desc>","select",
	"recovery","Recovery","<~archidroid.preset.recovery.desc>","select"
);

################
### RECOVERY ###
################

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "recovery" then
form(
	"<~archidroid.custom>",
	"<~archidroid.custom.desc>",
	"@apps",
	"archidroidrecovery.prop",

	"recovery","<#selectbg_g>Recovery</#>","","group",
	"philz","PhilZ Touch Recovery","<~archidroid.recovery.philz.desc>","select.selected",
	"devil","Devil Recovery","<~archidroid.recovery.devil.desc>","select"
);
else
	writetmpfile(
		"archidroidrecovery.prop",
		"recovery=none\n"
	);
endif;

#######################
### PREVIOUS PRESET ###
#######################

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "previous" then
	setvar("preset_version_probe",read("/data/media/0/ArchiDroid/AromaPreset/2.X/version.txt"));
	if getvar("preset_version")!=getvar("preset_version_probe") then
		alert("ArchiDroid Wizard","<~archidroid.detect.previouspreset.fail>","@alert");
		writetmpfile("archidroidinstallmode.prop","preset=custom\n");
	else
		writetmpfile("archidroid.prop",read("/data/media/0/ArchiDroid/AromaPreset/2.X/archidroid.prop"));
		writetmpfile("archidroidboeffla.prop",read("/data/media/0/ArchiDroid/AromaPreset/2.X/archidroidboeffla.prop"));
		writetmpfile("archidroidboefflasound.prop",read("/data/media/0/ArchiDroid/AromaPreset/2.X/archidroidboefflasound.prop"));
		writetmpfile("archidroidxposed.prop",read("/data/media/0/ArchiDroid/AromaPreset/2.X/archidroidxposed.prop"));
		writetmpfile("archidroidbuild.prop",read("/data/media/0/ArchiDroid/AromaPreset/2.X/archidroidbuild.prop"));
	endif;
endif;

###############################
### CUSTOM TYPE INSTALATION ###
###############################

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "custom" then
	form(
		"<~archidroid.custom>",
		"<~archidroid.custom.desc>",
		"@apps",
		"archidroid.prop",

		"kernel","<#selectbg_g>Kernel</#>","","group",
		"boeffla","Boeffla Kernel","<~archidroid.kernel.boeffla.desc>","select.selected",
		"temasek","Temasek Kernel [Wolfson/No ABB]","<~archidroid.kernel.temasek.desc>","select",
		"yank","Yank555.lu Kernel","<~archidroid.kernel.yank.desc>","select",
		"googy","Googy Max Kernel","<~archidroid.kernel.googy.desc>","select",
		"devil","Devil Kernel","<~archidroid.kernel.devil.desc>","select",
		"stock","Stock CM","<~archidroid.kernel.stock.desc>","select",

		"dpi","<#selectbg_g>DPI</#>","","group",
		"240","240 DPI","<~archidroid.dpi.240.desc>","select.selected",
		"280","280 DPI","<~archidroid.dpi.280.desc>","select",
		"320","320 DPI","<~archidroid.dpi.320.desc>","select",

		"launcher","<#selectbg_g>Launcher</#>","","group",
		"nova","Nova Launcher","<~archidroid.launcher.nova.desc>","select.selected",
		"stock","AOSP Launcher","<~archidroid.launcher.stock.desc>","select",
		"none","<~common.none>","<~archidroid.launcher.none.desc>","select",

		"keyboard","<#selectbg_g><~archidroid.keyboard></#>","","group",
		"touchpal","TouchPal Keyboard","<~archidroid.keyboard.touchpal.desc>","select.selected",
		"hackers","Hacker's Keyboard","<~archidroid.keyboard.hackers.desc>","select",
		"both","TouchPal + Hacker's Keyboard","<~archidroid.keyboard.both.desc>","select",
		"stock","Stock CM","<~archidroid.keyboard.stock.desc>","select",
		"none","<~common.none>","<~archidroid.keyboard.none.desc>","select",

		"bootanimation","<#selectbg_g><~archidroid.bootanimation></#>","","group",
		"archi","ArchiDroid","<~archidroid.bootanimation.archi.desc>","select.selected",
		"archilegacy","ArchiDroid Legacy","<~archidroid.bootanimation.archilegacy.desc>","select",
		"logcat","Logcat","<~archidroid.bootanimation.logcat.desc>","select",
		"stock","CyanogenMod","<~archidroid.bootanimation.stock.desc>","select",
		"none","<~common.none>","<~archidroid.bootanimation.none.desc>","select",

		"other","<#selectbg_g><~archidroid.other></#>","","group",
		"archidroidota","ArchiDroid OTA","<~archidroid.ota.desc>","check.checked",
		"xposed","Xposed Framework","<~archidroid.xposed.desc>","check.checked",
		"updatemodem","<~archidroid.updatemodem> [XXUGMK6]","<~archidroid.updatemodem.desc>","check",

		"googleapps","<#selectbg_g>Google Apps</#>","","group",
		"gapps","Google Apps","<~archidroid.gapps.desc>","check.checked",

		"archiapps","<#selectbg_g>ArchiDroid Apps</#>","","group",
		"vnc","VNC Viewer","<~archidroid.apps.vnc.desc>","check",
		"titaniumbackup","Titanium Backup","<~archidroid.apps.titaniumbackup.desc>","check.checked",
		"greenify","Greenify","<~archidroid.apps.greenify.desc>","check.checked",
		"lmt","LMT","<~archidroid.apps.lmt.desc>","check",
		"mxplayer","MXPlayer","<~archidroid.apps.mxplayer.desc>","check.checked",
		"spiritfm","Spirit FM","<~archidroid.apps.spiritfm.desc>","check.checked",
		"bbs","BetterBatteryStats","<~archidroid.apps.bbs.desc>","check.checked",
		"cooltool","CoolTool","<~archidroid.apps.cooltool.desc>","check.checked",
		"rootbrowser","Root Browser","<~archidroid.apps.rootbrowser.desc>","check.checked",

		"architweaks","<#selectbg_g>ArchiDroid Tweaks</#>","","group",
		"buildtweaks","Add build.prop Tweaks","<~archidroid.tweaks.buildtweaks.desc>","check.checked",
		"openpdroid","OpenPDroid","<~archidroid.tweaks.openpdroid.desc>","check",
		"nocell","Remove Cell Broadcasts","<~archidroid.tweaks.nocell.desc>","check.checked"
	);
	write("/data/media/0/ArchiDroid/AromaPreset/2.X/archidroid.prop",readtmpfile("archidroid.prop"));

	### ArchiDroid Extra ###
	if file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "boeffla" then
		form(
			"<~archidroid.custom.extra>",
			"<~archidroid.custom.desc>",
			"icons/apps",
			"archidroidboeffla.prop",

			"preset","<#selectbg_g>Boeffla Kernel Preset</#>","","group",
			"archiperformance","<~archidroid.preset.kernel.boeffla.archiperformance>","<~archidroid.preset.kernel.boeffla.archiperformance.desc>","select",
			"archipowersave","<~archidroid.preset.kernel.boeffla.archipowersave>","<~archidroid.preset.kernel.boeffla.archipowersave.desc>","select.selected",
			"archiultrapowersave","<~archidroid.preset.kernel.boeffla.archiultrapowersave>","<~archidroid.preset.kernel.boeffla.archiultrapowersave.desc>","select",
			"no","<~archidroid.preset.no>","<~archidroid.preset.no.desc>","select"
		);
		write("/data/media/0/ArchiDroid/AromaPreset/2.X/archidroidboeffla.prop",readtmpfile("archidroidboeffla.prop"));
	endif;

	### Boeffla for non-boeffla kernels, yet supporting boeffla sound engine ###
	if file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "stock" || file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "yank" then
		form(
			"<~archidroid.custom.extra>",
			"<~archidroid.custom.desc>",
			"icons/apps",
			"archidroidboefflasound.prop",

			"boeffla","<#selectbg_g>Boeffla Sound Control</#>","","group",
			"yesarchi","<~archidroid.boeffla.yesarchi>","<~archidroid.boeffla.yesarchi.desc>","select.selected",
			"yes","<~text_yes>","<~archidroid.boeffla.yes.desc>","select",
			"no","<~text_no>","<~archidroid.boeffla.no.desc>","select"
		);
		write("/data/media/0/ArchiDroid/AromaPreset/2.X/archidroidboefflasound.prop",readtmpfile("archidroidboefflasound.prop"));
	endif;

	if file_getprop("/tmp/aroma-data/archidroid.prop","xposed") == "1" then
		form(
			"<~archidroid.custom.extra>",
			"<~archidroid.custom.desc>",
			"@apps",
			"archidroidxposed.prop",

			"modules","<#selectbg_g>Xposed Modules</#>","","group",
			"appsettings","App Settings","<~archidroid.xposed.appsettings.desc>","check.checked",
			"xprivacy","XPrivacy","<~archidroid.xposed.xprivacy.desc>","check"
		);
		write("/data/media/0/ArchiDroid/AromaPreset/2.X/archidroidxposed.prop",readtmpfile("archidroidxposed.prop"));
	endif;
	if file_getprop("/tmp/aroma-data/archidroid.prop","buildtweaks") == "1" then
		form(
			"<~archidroid.custom.extra>",
			"<~archidroid.custom.desc>",
			"@apps",
			"archidroidbuild.prop",

			"build","<#selectbg_g>Build.prop Tweaks</#>","","group",
			"fastdormancy","Fast Dormancy","<~archidroid.buildtweaks.fastdormancy.desc>","check.checked",
			"zerowakeup","ZeroWakeUp","<~archidroid.buildtweaks.zerowakeup.desc>","check",
			"navibar","Navigation Bar","<~archidroid.buildtweaks.navibar.desc>","check"
		);
		write("/data/media/0/ArchiDroid/AromaPreset/2.X/archidroidbuild.prop",readtmpfile("archidroidbuild.prop"));
	endif;
	write("/data/media/0/ArchiDroid/AromaPreset/2.X/version.txt",getvar("preset_version"));

	####################
	### F2FS SUPPORT ###
	####################
	pleasewait("Executing Shell...");
	setvar("f2fs_check",resexec("exec/archidroid_check_fs.sh"));
	resexec("exec/archidroid_check_fs.sh", "/system");
	setvar("systemfs", getvar("exec_buffer"));
	resexec("exec/archidroid_check_fs.sh", "/cache");
	setvar("cachefs", getvar("exec_buffer"));
	resexec("exec/archidroid_check_fs.sh", "/preload");
	setvar("preloadfs", getvar("exec_buffer"));
	resexec("exec/archidroid_check_fs.sh", "/data");
	setvar("datafs", getvar("exec_buffer"));

	if getvar("f2fs_check") == "0" && file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "devil" then
		if getvar("extsdinstall") == "1" then
			# Variant 1, we have F2FS and extsd
			form(
				"ArchiDroid Partition Wizard",
				"<~archidroid.partition.wizard.desc>",
				"icons/apps",
				"archidroidfs.prop",

				"system","<#selectbg_g>/System filesystem</#>","","group",
				"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("systemfs"),"","select.selected",

				"data","<#selectbg_g>/Data filesystem</#>","","group",
				"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("datafs"),"","select.selected",

				"cache","<#selectbg_g>/Cache filesystem</#>","","group",
				#"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				#"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("cachefs"),"","select.selected",

				"preload","<#selectbg_g>/Preload filesystem</#>","","group",
				"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("preloadfs"),"","select.selected"
			);
		else
			# Variant 2, we have F2FS and intsd
			form(
				"ArchiDroid Partition Wizard",
				"<~archidroid.partition.wizard.desc>",
				"icons/apps",
				"archidroidfs.prop",

				"system","<#selectbg_g>/System filesystem</#>","","group",
				"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("systemfs"),"","select.selected",

				"data","<#selectbg_g>/Data filesystem</#>","","group",
				"current","Current: "+getvar("datafs"),"","select.selected",

				"cache","<#selectbg_g>/Cache filesystem</#>","","group",
				#"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				#"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("cachefs"),"","select.selected",

				"preload","<#selectbg_g>/Preload filesystem</#>","","group",
				"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("preloadfs"),"","select.selected"
			);
		endif;
	else
		if getvar("extsdinstall") == "1" then
			# Variant 3, we DON'T have F2FS but we have extsd
			form(
				"ArchiDroid Partition Wizard",
				"<~archidroid.partition.wizard.desc>",
				"icons/apps",
				"archidroidfs.prop",

				"system","<#selectbg_g>/System filesystem</#>","","group",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("systemfs"),"","select.selected",

				"data","<#selectbg_g>/Data filesystem</#>","","group",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("datafs"),"","select.selected",

				"cache","<#selectbg_g>/Cache filesystem</#>","","group",
				#"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("cachefs"),"","select.selected",

				"preload","<#selectbg_g>/Preload filesystem</#>","","group",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("preloadfs"),"","select.selected"
			);
		else
			# Variant 4, we DON'T have F2FS neither extsd
			form(
				"ArchiDroid Partition Wizard",
				"<~archidroid.partition.wizard.desc>",
				"icons/apps",
				"archidroidfs.prop",

				"system","<#selectbg_g>/System filesystem</#>","","group",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("systemfs"),"","select.selected",

				"data","<#selectbg_g>/Data filesystem</#>","","group",
				"current","Current: "+getvar("datafs"),"","select.selected",

				"cache","<#selectbg_g>/Cache filesystem</#>","","group",
				#"f2fs","F2FS","<~archidroid.filesystem.f2fs.desc>","select",
				#"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("cachefs"),"","select.selected",

				"preload","<#selectbg_g>/Preload filesystem</#>","","group",
				"ext4","EXT4","<~archidroid.filesystem.ext4.desc>","select",
				"current","Current: "+getvar("preloadfs"),"","select.selected"
			);
		endif;
	endif;

	# Execute what we've got

	# SYSTEM
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","system") == "f2fs" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/system", "f2fs"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","system") == "ext4" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/system", "ext4"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;

	# PRELOAD
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","preload") == "f2fs" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/preload", "f2fs"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","preload") == "ext4" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/preload", "ext4"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;

	# CACHE
	# Stub, not possible to do anything due to mount lock, pending solution

	# DATA
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","data") == "f2fs" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/data", "f2fs"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;
	if file_getprop("/tmp/aroma-data/archidroidfs.prop","data") == "ext4" then
		pleasewait("Reformatting...");
		setvar("resexec_retstatus",resexec("exec/adreformat.sh", "/data", "ext4"));
		textbox("ArchiDroid Partition Wizard", "<~archidroid.partition.wizard.finish.desc>", "@default", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));
	endif;
endif;

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") != "recovery" then
	#########################
	### ARCHIDROID DETECT ###
	#########################
	setvar("resexec_retstatus",resexec("exec/archidroid_detect.sh"));

	if getvar("resexec_retstatus")=="0" || getvar("resexec_retstatus")=="1" then
		if confirm(
			"ArchiDroid Detect",
			"<~archidroid.detect.fail>",
			"@info",
			"<~archidroid.detect.fail.yes>",
			"<~archidroid.detect.fail.no>"
		)=="yes" then
			alert("ArchiDroid Detect","<~archidroid.detect.fail.alert.yes>","@info");
			writetmpfile(
				"archidroidwipe.prop",
				"wipe=yes\n"
			);
		else
			alert("ArchiDroid Detect","<~archidroid.detect.fail.alert.no>","@alert");
			setvar("resexec_retstatus","2");
		endif;
	endif;
	if getvar("resexec_retstatus")=="2" then
		if confirm(
			"ArchiDroid Detect",
			"<~archidroid.detect.pass>",
			"@info",
			"<~archidroid.detect.pass.yes>",
			"<~archidroid.detect.pass.no>"
		)=="yes" then
			writetmpfile(
				"archidroidwipe.prop",
				"wipe=no\n"+
				"force=no\n"
			);
			if confirm(
				"ArchiDroid Detect",
				"<~archidroid.detect.force>",
			"@alert"
			)=="yes" then
				writetmpfile(
					"archidroidwipe.prop",
					"wipe=no\n"+
					"force=yes\n"
				);
			else
				writetmpfile(
					"archidroidwipe.prop",
					"wipe=no\n"+
					"force=no\n"
				);
			endif;
		else
			alert("ArchiDroid Detect","<~archidroid.detect.pass.alert.no>","@info");
			writetmpfile(
				"archidroidwipe.prop",
				"wipe=yes\n"
			);
		endif;
	endif;
endif;

ini_set("text_next", "<~common.flash>");
viewbox(
	"<~archidroid.prepinstall>",
	"<~archidroid.prepinstall.desc>",
	"@alert"
);

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "recovery" then
	ini_set("text_next", "<~common.reboot>");
else
	ini_set("text_next", "<~common.finish>");
endif;

install(
	"<~common.flashing>",
	"<~archidroid.install.desc>",
	"@install",
	"<~archidroid.install.finish>"
);

resexec("exec/adumount.sh", "/system");
resexec("exec/adumount.sh", "/data");

if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "recovery" then
	resexec("exec/rebootrecovery.sh");
else
	if confirm(
		"ArchiDroid Wizard",
		"<~archidroid.wizard.reboot>",
		"@confirm"
	)=="yes" then
		reboot("onfinish");
	endif;
endif;

# Delayed tasks. These for some reason require already flashed ArchiDroid
# Stub


# Ultra-delayed tasks. These are blocked by aroma process, can cause problems to aroma itself, take care
# Aroma is blocking /cache partition, therefore we must force-repartition that (if needed), this WILL cause recovery kernel panic but task itself finishes properly. Also, if we use instant "onfinish" reboot, kernel panic shouldn't happen, as recovery won't have time to access /cache partition. This should be safe approach.
